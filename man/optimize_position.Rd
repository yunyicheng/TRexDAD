% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline.R
\name{optimize_position}
\alias{optimize_position}
\title{Optimize a Single Position in a Position List}
\usage{
optimize_position(
  gene_codons,
  tile_length,
  pos_lst,
  curr_pos,
  left,
  right,
  use_greedy
)
}
\arguments{
\item{gene_codons}{A vector of DNA codons.}

\item{tile_length}{An integer representing the expected length of the tile.}

\item{pos_lst}{A numeric vector representing the current list of positions.}

\item{curr_pos}{The current position value that needs optimization.}

\item{left}{The left boundary of the scanning range for position optimization.}

\item{right}{The right boundary of the scanning range for position optimization.}

\item{use_greedy}{The optimization mode: TRUE for greedy, FALSE for MCMC.}
}
\value{
The optimized position value within the specified range.
If the function does not find a better position,
it returns the original position value.
}
\description{
This function optimizes a single position within a list of positions.
It adjusts the specified position to maximize the overall score
(obtained via \code{calculate_global_score}).
The function supports different optimization modes,
including greedy and Markov Chain Monte Carlo (MCMC) approaches.
}
\examples{
gene_codons <- c("GAG", "ATG", "TGT", "AGG", "TGC", "CGG", "CCA", 
"ATT", "TGA", "TAG", "GAA", "TGA", "AGC")
tile_length <- 5
pos_lst <- c(3, 6, 11)
curr_pos <- pos_lst[2]
left <- 7
right <- 10
optimize_position(gene_codons, tile_length, pos_lst, curr_pos, 
                    left, right, TRUE)
}
\references{
Hastings, W. K. Monte Carlo sampling methods using Markov chains
and their applications (1970). Biometrika 57, 97â€“109.
}
